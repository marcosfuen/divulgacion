variables:
  DB_ENGINE: django.db.backends.postgresql
  DB_HOST: db
  DB_PORT: 5432
  DB_USER: user
  DB_PASSWORD: password
  DB_NAME: db

stages:
  - build
  - test
  - review
  - staging
  - pre-production-clean
  - pre-production
  - production
  - cleanup

.build: &build
  image: docker:latest
  stage: build
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$APP_IMAGE" .
    - docker push "$APP_IMAGE"

build-review:
  <<: *build
  variables:
    APP_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  except:
    - master
    - pre-production
    - production

build-staging:
  <<: *build
  variables:
    APP_IMAGE: $CI_REGISTRY_IMAGE:latest
  only:
    - master

build-pre-production:
  <<: *build
  variables:
    APP_IMAGE: $CI_REGISTRY_IMAGE:pre-production
  only:
    - pre-production

build-production:
  <<: *build
  variables:
    APP_IMAGE: $CI_REGISTRY_IMAGE:production
  only:
    - production

.test: &test
  image:
    name: $APP_IMAGE
    entrypoint: [""]
  stage: test
  services:
    # Usar sevicio de Postgres
    - name: postgres:12.0
      alias: db
  # Configurar sevicio de Postgres
  script:
    # Crear migrations
    - python manage.py makemigrations
    # Aplicar migrations
    - python manage.py migrate
    # Ejecutar las pruebas (+coverage)
    - coverage run --source='.' manage.py test
    # Generar test coverage report
    - coverage report
  # Conservar cache de PIP entre builds
  # http://docs.gitlab.com/ce/ci/yaml/README.html#cache
  cache:
    paths:
    - ~/.cache/pip/
  # Text coverage report (regex tested on https://rubular.com/)
  coverage: '/^TOTAL.+?(\d+\%)$/'

test-review:
  <<: *test
  variables:
    POSTGRES_DB: $DB_NAME
    POSTGRES_PASSWORD: $DB_PASSWORD
    POSTGRES_USER: $DB_USER
    APP_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  except:
    - master
    - pre-production
    - production

test:
  <<: *test
  variables:
    POSTGRES_DB: $DB_NAME
    POSTGRES_PASSWORD: $DB_PASSWORD
    POSTGRES_USER: $DB_USER
    APP_IMAGE: $CI_REGISTRY_IMAGE
  only:
    - master

.deploy: &deploy
  image:
    name: greenled/portainer-stack-utils:0.1.2
    entrypoint: [""]
  script:
    - envsubst < $COMPOSE_FILE > tmp && cat tmp > docker-compose.yml
    - psu -a deploy -n $APP_NAME -c docker-compose.yml -s $HTTPIE_VERIFY_SSL

review:
  <<: *deploy
  stage: review
  variables:
    APP_NAME: $CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG
    APP_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    APP_HOST: $CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG.$TRAEFIK_DOMAIN
    DEBUG: 'True'
    HTTPIE_VERIFY_SSL: ${HTTPIE_VERIFY_SSL:-"yes"}
    DB_ENGINE: django.db.backends.sqlite3
    DB_NAME: db.sqlite3
    SECRET_KEY: mysocratesnotes
    AD_DNS_NAME: ${AD_DNS_NAME}
    AD_LDAP_PORT: ${AD_LDAP_PORT}
    LDAP_AUTH_USE_TLS: ${LDAP_AUTH_USE_TLS}
    LDAP_AUTH_SEARCH_BASE: ${LDAP_AUTH_SEARCH_BASE}
    LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN: ${LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN}
    COMPOSE_FILE: docker-compose.dev.yml
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG.$TRAEFIK_DOMAIN
    on_stop: stop-review
  only:
    - branches
  except:
    - master
    - pre-production
    - production

stop-review:
  image:
    name: greenled/portainer-stack-utils:0.1.2
    entrypoint: [""]
  stage: cleanup
  script:
    - psu -a undeploy -n $APP_NAME -s $HTTPIE_VERIFY_SSL
  when: manual
  variables:
    GIT_STRATEGY: none
    APP_NAME: $CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG
    HTTPIE_VERIFY_SSL: ${HTTPIE_VERIFY_SSL:-"yes"}
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - branches
  except:
    - master
    - pre-production
    - production
  # Solucion temporal para detener jobs
  # Ver https://gitlab.com/gitlab-org/gitlab-ee/issues/6144#note_79066987
  dependencies: []

remove-review-image:
  image: docker:latest
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker image rm $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  when: manual
  only:
    - branches
  except:
    - master
    - pre-production
    - production

staging:
  <<: *deploy
  stage: staging
  variables:
    APP_NAME: $CI_PROJECT_NAME-staging
    APP_IMAGE: $CI_REGISTRY_IMAGE:latest
    APP_HOST: $CI_PROJECT_NAME-staging.$TRAEFIK_DOMAIN
    DEBUG: 'True'
    HTTPIE_VERIFY_SSL: ${HTTPIE_VERIFY_SSL:-"yes"}
    DB_ENGINE: django.db.backends.sqlite3
    DB_NAME: db.sqlite3
    SECRET_KEY: mysocratesnotes
    AD_DNS_NAME: ${AD_DNS_NAME}
    AD_LDAP_PORT: ${AD_LDAP_PORT}
    LDAP_AUTH_USE_TLS: ${LDAP_AUTH_USE_TLS}
    LDAP_AUTH_SEARCH_BASE: ${LDAP_AUTH_SEARCH_BASE}
    LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN: ${LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN}
    COMPOSE_FILE: docker-compose.dev.yml
  environment:
    name: staging
    url: http://$CI_PROJECT_NAME-staging.$TRAEFIK_DOMAIN
  only:
    - master

pre-production-clean:
  image: postgres:12.0
  stage: pre-production-clean
  script:
    - psql -h $PRE_PRODUCTION_PGHOST -d $PRE_PRODUCTION_PGDATABASE -c "\dt" | awk 'NR>3 { print $3 }' | awk 'NF'
    - psql -h $PRE_PRODUCTION_PGHOST -d $PRE_PRODUCTION_PGDATABASE -c "\dt" | awk 'NR>3 { print $3 }' | awk 'NF' | while read table; do psql -h $PRE_PRODUCTION_PGHOST -d $PRE_PRODUCTION_PGDATABASE -c "DROP TABLE \"${table}\" CASCADE"; done;
    - pg_dump -h $PRODUCTION_PGHOST -d $PRODUCTION_PGDATABASE | psql -h $PRE_PRODUCTION_PGHOST -d $PRE_PRODUCTION_PGDATABASE
    - psql -h $PRE_PRODUCTION_PGHOST -d $PRE_PRODUCTION_PGDATABASE -c "\dt" | awk 'NR>3 { print $3 }' | awk 'NF'
  only:
    - pre-production

pre-production:
  <<: *deploy
  stage: pre-production
  variables:
    APP_NAME: $CI_PROJECT_NAME-pre-production
    APP_IMAGE: $CI_REGISTRY_IMAGE:pre-production
    APP_HOST: $CI_PROJECT_NAME-pre-production.$TRAEFIK_DOMAIN
    DEBUG: 'True'
    DB_ENGINE: django.db.backends.postgresql
    DB_NAME: $PRE_PRODUCTION_PGDATABASE
    DB_HOST: $PRE_PRODUCTION_PGHOST
    DB_USER: $PGUSER
    DB_PASSWORD: $PGPASSWORD
    SECRET_KEY: $SECRET_KEY
    AD_DNS_NAME: $AD_DNS_NAME
    AD_LDAP_PORT: $AD_LDAP_PORT
    LDAP_AUTH_USE_TLS: $LDAP_AUTH_USE_TLS
    LDAP_AUTH_SEARCH_BASE: $LDAP_AUTH_SEARCH_BASE
    LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN: $LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN
    COMPOSE_FILE: docker-compose.dev.yml
  environment:
    name: pre-production
    url: http://$CI_PROJECT_NAME-pre-production.$TRAEFIK_DOMAIN
  only:
    - pre-production

production:
  <<: *deploy
  stage: production
  variables:
    APP_NAME: $CI_PROJECT_NAME-production
    APP_IMAGE: $CI_REGISTRY_IMAGE:production
    APP_HOST: $CI_PROJECT_NAME.$TRAEFIK_DOMAIN
    DEBUG: 'True'
    DB_ENGINE: django.db.backends.postgresql
    DB_NAME: $PRODUCTION_PGDATABASE
    DB_HOST: $PRODUCTION_PGHOST
    DB_USER: $PGUSER
    DB_PASSWORD: $PGPASSWORD
    SECRET_KEY: $SECRET_KEY
    MEDIA_VOLUME_SHARE: "${PRODUCTION_MEDIA_VOLUME_SHARE}"
    AD_DNS_NAME: $AD_DNS_NAME
    AD_LDAP_PORT: $AD_LDAP_PORT
    LDAP_AUTH_USE_TLS: $LDAP_AUTH_USE_TLS
    LDAP_AUTH_SEARCH_BASE: $LDAP_AUTH_SEARCH_BASE
    LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN: $LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN
    COMPOSE_FILE: docker-compose.prod.yml
  environment:
    name: production
    url: http://$CI_PROJECT_NAME.$TRAEFIK_DOMAIN
  only:
    - production
